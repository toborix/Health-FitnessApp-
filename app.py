import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objs as go
import time


st.set_page_config(layout="wide")


def main_page():
    st.title('–í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_')
    with st.form("user_info_form"):
        sex = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª', ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'])
        age = st.number_input('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç', min_value=12, max_value=110)
        weight = st.number_input('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥)', min_value=30, max_value=200)
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ (CSV)", type="csv")

        submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        if submitted:
            with st.spinner('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'):
                time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
                if uploaded_file is not None:
                    data = pd.read_csv(uploaded_file)
                    st.session_state['user_data'] = data
                st.session_state['user_info'] = {'–ü–æ–ª': sex, '–í–æ–∑—Ä–∞—Å—Ç': age, '–í–µ—Å': weight}
                st.session_state['info_submitted'] = True
                st.experimental_rerun()


def report_page():

    st.title("–û—Ç—á–µ—Ç –æ –º–µ—Ç—Ä–∏–∫–∞—Ö –∑–¥–æ—Ä–æ–≤—å—è")

    # Custom CSS styles
    st.markdown("""
        <style>
            .metric-box {
                background-color: #333333;
                border-left: 5px solid #F63366;
                color: #ffffff;
                padding: 20px;
                margin: 5px 10px;
                border-radius: 10px;
                display: inline-block;
                font-size: 18px;
            }
            .metric-value {
                font-size: 28px;
                font-weight: bold;
            }
            .trend-indicator {
                padding: 10px;
                margin: 10px;
                font-size: 18px;
                text-align: center;
                color: white;
                border-radius: 10px;
            }
            .positive { background-color: #4CAF50; }
            .negative { background-color: #f44336; }
            .neutral { background-color: #FFC107; }
        </style>
    """, unsafe_allow_html=True)

    # Generate sample data
    dates = pd.date_range('2021-01-01', '2021-12-31', freq='D')
    data = pd.DataFrame({
        '–®–∞–≥–∏': np.random.randint(1000, 10000, size=len(dates)),
        '–ß–∞—Å—ã —Å–Ω–∞': np.random.normal(7, 1.5, size=len(dates)),
        '–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∫–∞–ª': np.random.randint(200, 600, size=len(dates))
    }, index=dates)

    for metric in data.columns:
        x = np.arange(len(data))
        y = data[metric].values
        slope, intercept = np.polyfit(x, y, 1)
        trend_line = slope * x + intercept

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=data.index, y=y, mode='lines', name='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'))
        fig.add_trace(
            go.Scatter(x=data.index, y=trend_line, mode='lines', name='–õ–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥', line=dict(color='red')))
        fig.update_layout(title=f"{metric.capitalize()} –ø–æ –≤—Ä–µ–º–µ–Ω–∏", xaxis_title='–î–∞—Ç–∞', yaxis_title=metric,
                          template='plotly_dark', autosize=True)

        st.plotly_chart(fig, use_container_width=True)

        # Layout columns
        col1, col2, col3, col_trend = st.columns([1, 1, 1, 2])

        # Metric statistics
        col1.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{y.mean():.2f}")
        col2.metric("–ú–∞–∫—Å–∏–º—É–º", f"{y.max():.0f}")
        col3.metric("–ú–∏–Ω–∏–º—É–º", f"{y.min():.0f}")

        # Trend interpretation
        if slope > 0.1:
            message, advice, color_class = "–£–ª—É—á—à–µ–Ω–∏–µ üìà", "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!", "positive"
        elif slope < -0.1:
            message, advice, color_class = "–£—Ö—É–¥—à–µ–Ω–∏–µ üìâ", "–ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã.", "negative"
        else:
            message, advice, color_class = "–°—Ç–∞–±–∏–ª—å–Ω–æ ‚ÜóÔ∏è", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å.", "neutral"

        trend_html = f"<div class='trend-indicator {color_class}'>{message}<br>{advice}</div>"
        col_trend.markdown(trend_html, unsafe_allow_html=True)


def group_health_analysis_page():
    st.title("–ü–∞–Ω–µ–ª—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è")  # Translated title

    # Dummy dataset with multiple users, age groups, and metrics
    np.random.seed(42)
    data = pd.DataFrame({
        'Age Group': np.random.choice(['20-30', '31-40', '41-50', '51-60', '61+'], 500),
        'Resting Heart Rate': np.random.normal(70, 10, 500),
        'BMI': np.random.normal(25, 4, 500),
        'VO2 Max': np.random.normal(40, 10, 500)
    })

    # Retrieve user info if exists and set default selection
    user_info = st.session_state.get('user_info', {})
    age = user_info.get('–í–æ–∑—Ä–∞—Å—Ç', None)

    # Determine preselected age group based on user's age
    if age:
        if age < 30:
            default_age_group = '20-30'
        elif age < 40:
            default_age_group = '31-40'
        elif age < 50:
            default_age_group = '41-50'
        elif age < 60:
            default_age_group = '51-60'
        else:
            default_age_group = '61+'
    else:
        default_age_group = '20-30'  # Set a default or handle appropriately.

    # User input to select the age group and metric
    age_group = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:", options=['20-30', '31-40', '41-50', '51-60', '61+'],
                             index=['20-30', '31-40', '41-50', '51-60', '61+'].index(default_age_group))
    metric = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É:", data.columns[1:])  # Translated prompt

    # User's metric value
    user_metric_value = data[(data['Age Group'] == age_group)][metric].sample(n=1).values[0]

    # Filter data for the selected age group and metric
    filtered_data = data[data['Age Group'] == age_group][metric]

    # Create histogram of the metric for the selected age group
    y, x = np.histogram(filtered_data, bins=20)
    colors = ['lightsalmon' if not x[i] <= user_metric_value < x[i + 1] else 'deepskyblue' for i in range(len(x) - 1)]
    fig = go.Figure(data=[go.Bar(x=(x[:-1] + x[1:]) / 2, y=y, marker_color=colors, width=np.diff(x))])

    # Update plot layout
    fig.update_layout(
        title=f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {metric} –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã {age_group} —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        xaxis_title=metric,  # Metric name doesn't need translation.
        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        template='plotly_white',
        bargap=0.05
    )
    st.plotly_chart(fig, use_container_width=True)

    # Explanation Text
    percentile = np.percentile(filtered_data, 100 * (filtered_data <= user_metric_value).mean())
    explanation = f"–í–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ {metric} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {user_metric_value:.2f}, —á—Ç–æ —Å—Ç–∞–≤–∏—Ç –≤–∞—Å –≤ {percentile:.0f} –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å —Å—Ä–µ–¥–∏ –≤–∞—à–µ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã."

    if percentile > 50:
        comparison = "–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –≤—ã—à–µ –º–µ–¥–∏–∞–Ω—ã –¥–ª—è –≤–∞—à–µ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã."
    else:
        comparison = "–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –Ω–∏–∂–µ –º–µ–¥–∏–∞–Ω—ã –¥–ª—è –≤–∞—à–µ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã."

    st.write(explanation)
    st.write(comparison)

def advice_page():
    st.title('–°–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é')
    st.write("–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é:")
    if 'user_info' in st.session_state:
        user_info = st.session_state['user_info']
        if user_info['–í–æ–∑—Ä–∞—Å—Ç'] < 18:
            st.write("–û–±–µ—Å–ø–µ—á—å—Ç–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –±–æ–≥–∞—Ç–æ–µ —Ñ—Ä—É–∫—Ç–∞–º–∏ –∏ –æ–≤–æ—â–∞–º–∏.")
        elif user_info['–í–æ–∑—Ä–∞—Å—Ç'] < 50:
            st.write("–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤–∞–∂–Ω—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–µ—Å–∞.")
        else:
            st.write("–†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã –¥–ª—è –≤–∞—à–µ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã.")


def navigation():
    # Create navigation links
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    if st.sidebar.button("–ì–ª–∞–≤–Ω–∞—è"):
        st.session_state['page'] = 'home'
    if st.sidebar.button("–û—Ç—á–µ—Ç"):
        st.session_state['page'] = 'report'
    if st.sidebar.button("–ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è –≥—Ä—É–ø–ø"):  # Use your selected page name here in Russian
        st.session_state['page'] = 'group_health_analysis'
    if st.sidebar.button("–°–æ–≤–µ—Ç—ã"):
        st.session_state['page'] = 'advice'



# Check session state for the current page
if 'page' not in st.session_state:
    st.session_state['page'] = 'home'

# Initialize session state
if 'info_submitted' not in st.session_state:
    st.session_state['info_submitted'] = False

if not st.session_state['info_submitted']:
    main_page()
else:
    navigation()  # Show navigation links
    if st.session_state['page'] == 'home':
        main_page()
    elif st.session_state['page'] == 'report':
        report_page()
    elif st.session_state['page'] == 'advice':
        advice_page()
    elif st.session_state['page'] == 'group_health_analysis':
        group_health_analysis_page()
